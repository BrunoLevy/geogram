
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else    /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif    /* defined (__STDC__) */
#endif    /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_nullptr 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n)                                                       \
    do                                                                  \
    {                                                                   \
        /* Undo effects of setting up yytext. */                        \
        int yyless_macro_arg = (n);                                     \
        YY_LESS_LINENO(yyless_macro_arg);                               \
        *yy_cp = (yy_hold_char);                                        \
        YY_RESTORE_YY_MORE_OFFSET                                       \
            (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
        YY_DO_BEFORE_ACTION; /* set up yytext again */                  \
    }                                                                   \
    while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
    FILE *yy_input_file;

    char *yy_ch_buf;        /* input buffer */
    char *yy_buf_pos;        /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or nullptr.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack)                           \
                            ? (yy_buffer_stack)[(yy_buffer_stack_top)]  \
                            : nullptr)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * nullptr or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;        /* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;        /* whether we need to initialize */
static int yy_start = 0;    /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive)                              \
    {                                                                   \
        if ( ! YY_CURRENT_BUFFER ){                                     \
            yyensure_buffer_stack ();                                   \
            YY_CURRENT_BUFFER_LVALUE =                                  \
                yy_create_buffer(yyin,YY_BUF_SIZE );                    \
        }                                                               \
        YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive;   \
    }

#define yy_set_bol(at_bol)                              \
    {                                                   \
        if ( ! YY_CURRENT_BUFFER ){                     \
            yyensure_buffer_stack ();                   \
            YY_CURRENT_BUFFER_LVALUE =                  \
                yy_create_buffer(yyin,YY_BUF_SIZE );    \
        }                                               \
        YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol;   \
    }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION                     \
    (yytext_ptr) = yy_bp;                       \
    yyleng = (size_t) (yy_cp - yy_bp);          \
    (yy_hold_char) = *yy_cp;                    \
    *yy_cp = '\0';                              \
    (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 80
#define YY_END_OF_BUFFER 81
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
    flex_int32_t yy_verify;
    flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[375] =
{   0,
    0,    0,    0,    0,    0,    0,    0,    0,   81,   79,
    78,   78,   66,   79,    1,   72,   65,   60,   61,   70,
    69,   57,   68,   64,   71,   28,   58,   54,   73,   59,
    74,   77,   27,   62,   63,   75,   27,   27,   27,   27,
    27,   27,   27,   27,   27,   27,   27,   27,   55,   76,
    56,   67,    2,   78,   78,   79,   79,   78,    4,    4,
    66,   79,    1,   72,   65,   60,   61,   70,   69,   57,
    68,   64,   71,   28,   58,   54,   73,   59,   74,   77,
    27,   62,   63,   75,   27,   27,   27,   27,   27,   27,
    27,   27,   27,   27,   27,   27,   55,   76,   56,   67,

    53,    0,   32,    0,    1,   39,   56,   48,   40,   37,
    45,   35,   46,    0,   28,   36,   47,   30,    5,   38,
    31,    0,   63,   55,   62,   44,   50,   52,   51,   43,
    27,   41,   27,   27,   27,   27,   27,   27,   27,   27,
    27,   27,   27,    9,   27,   27,   27,   27,   27,   27,
    27,   42,   49,    2,    0,    0,    0,    3,    0,    0,
    4,    4,   53,    0,    4,    4,   32,    0,    1,    1,
    39,   56,   48,   40,   37,   45,   35,   46,    0,   28,
    36,   47,   30,    5,   38,   31,    0,   63,   55,   62,
    44,   50,   52,   51,   43,   27,   41,   27,   27,   27,

    27,   27,   27,   27,   27,   27,   27,   27,    9,   27,
    27,   27,   27,   27,   27,   27,   42,   49,    0,   30,
    30,    0,   31,    0,   29,   34,   33,   15,   27,   27,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
    10,   27,   27,   27,   27,   27,   27,    0,    3,    0,
    0,   30,   30,    0,   31,    0,   29,   34,   33,   15,
    27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
    27,   27,   10,   27,   27,   27,   27,   27,   27,    0,
    30,    0,   30,    0,   31,   29,   11,   27,   27,   27,
    7,   19,   27,   27,   27,   27,   27,   27,   27,   14,

    16,   21,   27,   13,    0,   30,    0,   30,    0,   31,
    29,   11,   27,   27,   27,    7,   19,   27,   27,   27,
    27,   27,   27,   27,   14,   16,   21,   27,   13,    0,
    30,   27,   27,   27,   23,   27,   20,    8,   24,   27,
    27,   27,    0,   30,   27,   27,   27,   23,   27,   20,
    8,   24,   27,   27,   27,   27,   25,    6,   22,   18,
    12,   27,   27,   25,    6,   22,   18,   12,   27,   26,
    17,   26,   17,    0
} ;

static yyconst YY_CHAR yy_ec[256] =
{   0,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
    2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    5,    6,    7,    1,    8,    9,    1,   10,
    11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
    18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
    22,   23,   24,    1,   25,   25,   25,   25,   26,   27,
    25,   25,   25,   25,   25,   28,   25,   25,   25,   25,
    25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
    29,   30,   31,   32,   25,    1,   33,   34,   35,   36,

    37,   38,   39,   25,   40,   25,   25,   41,   42,   43,
    44,   45,   46,   47,   48,   49,   50,   51,   25,   52,
    53,   25,   54,   55,   56,   57,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1
} ;

static yyconst YY_CHAR yy_meta[58] =
{   0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
    1,    1,    1,    1,    2,    2,    2,    2,    1,    1,
    1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    1,    1,    1,    1
} ;

static yyconst flex_uint16_t yy_base[381] =
{   0,
    0,    0,  711,  710,   56,   58,   64,    0,  727,  730,
    730,  730,  704,  116,  121,  103,  118,  730,  730,  703,
    115,  730,  116,  706,  121,  126,  700,  730,  128,  700,
    107,  730,    0,  730,  730,  699,  686,  675,  674,  104,
    110,  123,  670,  116,  679,  115,  113,  671,  730,  113,
    730,  730,  149,  167,  174,  151,  168,  175,  179,  181,
    184,  186,  191,  195,  193,  197,  200,  204,  206,  208,
    217,  219,  226,  238,  221,  210,  247,  243,  249,  254,
    273,  256,  258,  270,  680,  669,  668,  190,  237,  246,
    664,  193,  673,  203,  235,  665,  280,  282,  290,  292,

    730,  275,  730,  705,  300,  730,  730,  730,  730,  730,
    730,  730,  730,  689,  312,  730,  730,  313,  730,  730,
    318,  314,  730,  730,  730,  684,  730,  730,  730,  683,
    0,  730,  656,  659,  660,  662,  650,  651,  648,  125,
    656,  652,  651,    0,  293,  645,  654,  645,  641,  645,
    649,  730,  730,  342,  359,  327,  337,  730,  685,  344,
    349,  360,  366,  368,  372,  377,  381,  383,  386,  389,
    391,  393,  396,  400,  402,  405,  407,  409,  411,  414,
    416,  418,  449,  420,  422,  488,  424,  430,  432,  440,
    442,  444,  446,  451,  456,    0,  453,  639,  642,  643,

    645,  633,  634,  631,  333,  639,  635,  634,    0,  417,
    628,  637,  628,  624,  628,  632,  458,  465,  466,  730,
    467,  483,  730,  653,  482,  730,  730,    0,  629,  624,
    621,  633,  629,  623,  629,  626,  614,  628,  610,  619,
    0,  608,  614,  607,  618,  617,  617,  371,  730,  649,
    509,  467,  527,  529,  469,  479,  531,  485,  499,    0,
    610,  594,  591,  602,  598,  592,  598,  595,  583,  597,
    579,  588,    0,  575,  580,  573,  583,  582,  582,  598,
    510,  528,  730,  597,  539,  730,    0,  581,  576,  566,
    0,    0,  555,  553,  560,  535,  538,  533,  527,    0,

    0,    0,  537,    0,  557,  567,  575,  514,  578,  583,
    536,    0,  530,  525,  515,    0,    0,  503,  503,  499,
    472,  474,  468,  460,    0,    0,    0,  463,    0,  462,
    571,  427,  428,  426,    0,  398,    0,    0,    0,  401,
    388,  379,  588,  599,  326,  298,  260,    0,  247,    0,
    0,    0,  233,  224,  226,  208,    0,    0,    0,    0,
    0,  167,  154,    0,    0,    0,    0,    0,  107,    0,
    0,    0,    0,  730,  640,   61,  642,  644,  646,  648
} ;

static yyconst flex_int16_t yy_def[381] =
{   0,
    374,    1,    1,    1,    1,    1,  374,    7,  374,  374,
    374,  374,  374,  375,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  376,  374,  374,  374,  376,  376,  376,  376,
    376,  376,  376,  376,  376,  376,  376,  376,  374,  374,
    374,  374,  374,  374,  374,  377,  378,  378,  374,  378,
    378,  379,  378,  378,  378,  378,  378,  378,  378,  378,
    378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
    378,  378,  378,  378,   81,   81,   81,   81,   81,   81,
    81,   81,   81,   81,   81,   81,  378,  378,  378,  378,

    374,  375,  374,  375,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    376,  374,  376,  376,  376,  376,  376,  376,  376,  376,
    376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
    376,  374,  374,  374,  374,  380,  377,  374,  377,  378,
    374,  378,  378,  379,  375,  379,  378,  379,  378,  374,
    378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
    378,  378,  378,  378,  378,  378,  378,  378,  378,  378,
    378,  378,  378,  378,  378,   81,  378,   81,   81,   81,

    81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
    81,   81,   81,   81,   81,   81,  378,  378,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  376,  376,  376,
    376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
    376,  376,  376,  376,  376,  376,  376,  380,  374,  380,
    378,  378,  378,  378,  378,  378,  378,  378,  378,   81,
    81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
    81,   81,   81,   81,   81,   81,   81,   81,   81,  374,
    374,  374,  374,  374,  374,  374,  376,  376,  376,  376,
    376,  376,  376,  376,  376,  376,  376,  376,  376,  376,

    376,  376,  376,  376,  378,  378,  378,  378,  378,  378,
    378,   81,   81,   81,   81,   81,   81,   81,   81,   81,
    81,   81,   81,   81,   81,   81,   81,   81,   81,  374,
    374,  376,  376,  376,  376,  376,  376,  376,  376,  376,
    376,  376,  378,  378,   81,   81,   81,   81,   81,   81,
    81,   81,   81,   81,   81,  376,  376,  376,  376,  376,
    376,  376,   81,   81,   81,   81,   81,   81,   81,  376,
    376,   81,   81,    0,  374,  374,  374,  374,  374,  374
} ;

static yyconst flex_uint16_t yy_nxt[788] =
{   0,
    10,   11,   12,   10,   13,   14,   15,   16,   17,   18,
    19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
    29,   30,   31,   32,   33,   33,   33,   33,   34,   10,
    35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
    33,   33,   33,   33,   33,   33,   45,   46,   47,   33,
    48,   33,   33,   49,   50,   51,   52,   54,   55,   54,
    55,   56,  131,   56,   57,   58,   59,   60,   61,   62,
    63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
    73,   74,   75,   76,   77,   78,   79,   80,   81,   81,
    81,   81,   82,   57,   83,   84,   85,   86,   87,   88,

    89,   90,   91,   92,   81,   81,   81,   81,   81,   81,
    93,   94,   95,   81,   96,   81,   81,   97,   98,   99,
    100,  103,  105,  105,  106,  107,  108,  111,  129,  130,
    113,  114,  119,  115,  152,  124,  112,  116,  117,  109,
    136,  121,  120,  115,  373,  104,  125,  137,  126,  127,
    138,  122,  139,  144,  147,  141,  158,  235,  145,  149,
    148,  140,  122,  142,  121,  150,  154,  153,  155,  155,
    161,  162,  156,  236,  122,  155,  155,  161,  162,  156,
    159,  161,  161,  161,  162,  122,  161,  162,  165,  166,
    372,  167,  169,  170,  162,  161,  162,  161,  162,  161,

    162,  173,  161,  162,  371,  163,  161,  162,  161,  162,
    161,  162,  161,  162,  174,  168,  171,  172,  176,  161,
    162,  161,  162,  161,  162,  175,  201,  177,  161,  162,
    209,  178,  179,  202,  180,  210,  183,  184,  181,  182,
    161,  162,  212,  188,  370,  161,  162,  185,  213,  161,
    162,  161,  162,  186,  189,  180,  161,  162,  161,  162,
    161,  162,  369,  187,  193,  190,  368,  191,  192,  367,
    194,  195,  161,  162,  187,  161,  162,  203,  206,  204,
    103,  214,  161,  162,  161,  162,  207,  215,  205,  366,
    196,  197,  161,  162,  161,  162,  365,  196,  196,  196,

    196,  105,  105,  217,  104,  196,  196,  196,  196,  196,
    196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
    196,  196,  196,  196,  196,  196,  224,  121,  224,  115,
    118,  225,  249,  240,  364,  221,  218,  122,  219,  220,
    220,  241,  158,  222,  223,  223,  161,  162,  122,  219,
    220,  161,  161,  220,  222,  223,  250,  121,  223,  154,
    155,  155,  161,  162,  156,  267,  159,  122,  161,  162,
    165,  166,  363,  167,  165,  165,  249,  103,  122,  165,
    166,  268,  167,  161,  162,  161,  166,  169,  170,  162,
    105,  170,  161,  161,  162,  161,  162,  168,  161,  162,

    250,  104,  161,  162,  161,  162,  168,  161,  162,  161,
    162,  161,  162,  161,  162,  362,  161,  162,  161,  162,
    161,  162,  161,  162,  161,  162,  161,  162,  183,  186,
    361,  180,  161,  162,  161,  162,  256,  360,  256,  187,
    359,  257,  161,  162,  161,  162,  161,  162,  161,  162,
    187,  161,  162,  161,  162,  161,  162,  272,  161,  162,
    161,  162,  358,  258,  357,  273,  183,  161,  162,  161,
    162,  161,  162,  356,  251,  252,  252,  259,  280,  331,
    280,  161,  162,  281,  221,  251,  252,  161,  162,  252,
    161,  162,  282,  283,  283,  284,  257,  284,  355,  225,

    285,  161,  162,  282,  283,  253,  354,  283,  286,  286,
    353,  161,  162,  254,  255,  255,  161,  162,  352,  286,
    351,  305,  286,  305,  254,  255,  306,  281,  255,  161,
    162,  161,  162,  161,  162,  350,  220,  220,  161,  162,
    330,  309,  330,  309,  253,  331,  310,  220,  257,  349,
    220,  348,  307,  308,  308,  347,  285,  311,  311,  161,
    162,  346,  345,  307,  308,  223,  223,  308,  311,  161,
    162,  311,  342,  341,  306,  340,  223,  161,  162,  223,
    161,  162,  339,  338,  306,  161,  162,  343,  331,  343,
    161,  162,  344,  252,  252,  310,  337,  283,  283,  336,

    310,  161,  162,  335,  252,  344,  334,  252,  283,  255,
    255,  283,  333,  332,  285,  281,  344,  329,  328,  327,
    255,  326,  325,  255,  324,  308,  308,  323,  322,  321,
    320,  319,  318,  317,  316,  315,  308,  314,  313,  308,
    102,  102,  157,  157,  160,  160,  164,  164,  248,  248,
    312,  374,  304,  303,  302,  301,  300,  299,  298,  297,
    296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
    225,  279,  278,  277,  276,  275,  274,  271,  270,  269,
    266,  265,  264,  263,  262,  261,  260,  374,  247,  246,
    245,  244,  243,  242,  239,  238,  237,  234,  233,  232,

    231,  230,  229,  228,  227,  226,  118,  374,  216,  211,
    208,  200,  199,  198,  151,  146,  143,  135,  134,  133,
    132,  128,  123,  118,  110,  101,  374,   53,   53,    9,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374
} ;

static yyconst flex_int16_t yy_chk[788] =
{   0,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    5,    5,    6,
    6,    5,  376,    6,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,   14,   15,   15,   16,   16,   17,   21,   31,   31,
    23,   23,   25,   23,   50,   29,   21,   23,   23,   17,
    40,   26,   25,   26,  369,   14,   29,   40,   29,   29,
    41,   26,   41,   44,   46,   42,   56,  140,   44,   47,
    46,   41,   26,   42,   53,   47,   53,   50,   54,   54,
    57,   57,   54,  140,   53,   55,   55,   58,   58,   55,
    56,   59,   59,   60,   60,   53,   61,   61,   62,   62,
    363,   62,   63,   63,   63,   65,   65,   64,   64,   66,

    66,   65,   67,   67,  362,   61,   68,   68,   69,   69,
    70,   70,   76,   76,   65,   62,   64,   64,   69,   71,
    71,   72,   72,   75,   75,   68,   88,   69,   73,   73,
    92,   71,   71,   88,   71,   92,   72,   73,   71,   71,
    74,   74,   94,   75,  356,   78,   78,   73,   94,   77,
    77,   79,   79,   74,   77,   74,   80,   80,   82,   82,
    83,   83,  355,   74,   78,   77,  354,   77,   77,  353,
    79,   79,   84,   84,   74,   81,   81,   89,   90,   89,
    102,   95,   97,   97,   98,   98,   90,   95,   89,  349,
    81,   84,   99,   99,  100,  100,  347,   81,   81,   81,

    81,  105,  105,   98,  102,   81,   81,   81,   81,   81,
    81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
    81,   81,   81,   81,   81,   81,  122,  115,  122,  115,
    118,  122,  156,  145,  346,  121,   98,  115,  118,  118,
    118,  145,  157,  121,  121,  121,  160,  160,  115,  118,
    118,  161,  161,  118,  121,  121,  156,  154,  121,  154,
    155,  155,  162,  162,  155,  205,  157,  154,  163,  163,
    164,  164,  345,  164,  165,  165,  248,  165,  154,  166,
    166,  205,  166,  167,  167,  168,  168,  169,  169,  169,
    170,  170,  170,  171,  171,  172,  172,  164,  173,  173,

    248,  165,  174,  174,  175,  175,  166,  176,  176,  177,
    177,  178,  178,  179,  179,  342,  180,  180,  181,  181,
    182,  182,  184,  184,  185,  185,  187,  187,  179,  180,
    341,  180,  188,  188,  189,  189,  187,  340,  187,  180,
    336,  187,  190,  190,  191,  191,  192,  192,  193,  193,
    180,  183,  183,  194,  194,  197,  197,  210,  195,  195,
    217,  217,  334,  191,  333,  210,  183,  218,  218,  252,
    252,  255,  255,  332,  183,  183,  183,  195,  219,  330,
    219,  256,  256,  219,  221,  183,  183,  258,  258,  183,
    186,  186,  221,  221,  221,  222,  256,  222,  328,  225,

    222,  259,  259,  221,  221,  186,  324,  221,  225,  225,
    323,  251,  251,  186,  186,  186,  308,  308,  322,  225,
    321,  251,  225,  251,  186,  186,  251,  281,  186,  253,
    253,  254,  254,  257,  257,  320,  281,  281,  311,  311,
    282,  254,  282,  254,  253,  282,  254,  281,  257,  319,
    281,  318,  253,  253,  253,  315,  285,  257,  257,  305,
    305,  314,  313,  253,  253,  285,  285,  253,  257,  306,
    306,  257,  303,  299,  305,  298,  285,  307,  307,  285,
    309,  309,  297,  296,  306,  310,  310,  307,  331,  307,
    343,  343,  307,  306,  306,  309,  295,  331,  331,  294,

    310,  344,  344,  293,  306,  343,  290,  306,  331,  310,
    310,  331,  289,  288,  284,  280,  344,  279,  278,  277,
    310,  276,  275,  310,  274,  344,  344,  272,  271,  270,
    269,  268,  267,  266,  265,  264,  344,  263,  262,  344,
    375,  375,  377,  377,  378,  378,  379,  379,  380,  380,
    261,  250,  247,  246,  245,  244,  243,  242,  240,  239,
    238,  237,  236,  235,  234,  233,  232,  231,  230,  229,
    224,  216,  215,  214,  213,  212,  211,  208,  207,  206,
    204,  203,  202,  201,  200,  199,  198,  159,  151,  150,
    149,  148,  147,  146,  143,  142,  141,  139,  138,  137,

    136,  135,  134,  133,  130,  126,  114,  104,   96,   93,
    91,   87,   86,   85,   48,   45,   43,   39,   38,   37,
    36,   30,   27,   24,   20,   13,    9,    4,    3,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374,  374,  374,  374,
    374,  374,  374,  374,  374,  374,  374
} ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex.l"
#line 11 "lex.l"
#include <cstring>
#include <cstdio>
#include <FPG/AST.h>
#include <FPG/Declarator.h>
#include <FPG/SymbolEnvironment.h>

struct Group_rep;

#include "parse.tab.h"

extern void yyerror(char *s);
extern int lineno;
void count();
void comment();
int caller;


#line 778 "lex.yy.c"

#define INITIAL 0
#define LINE_DIRECTIVE_LINENO 1
#define LINE_DIRECTIVE_FILENAME 2
#define REST_OF_LINE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT

static void yyunput (int c,char *buf_ptr  );

#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_nullptr,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size)                                   \
    if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive )                  \
    {                                                                   \
        int c = '*';                                                    \
        size_t n;                                                       \
        for ( n = 0; n < max_size &&                                    \
                  (c = getc( yyin )) != EOF && c != '\n'; ++n )         \
            buf[n] = (char) c;                                          \
        if ( c == '\n' )                                                \
            buf[n++] = (char) c;                                        \
        if ( c == EOF && ferror( yyin ) )                               \
            YY_FATAL_ERROR( "input in flex scanner failed" );           \
        result = n;                                                     \
    }                                                                   \
    else                                                                \
    {                                                                   \
        errno=0;                                                        \
        while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
        {                                                               \
            if( errno != EINTR)                                         \
            {                                                           \
                YY_FATAL_ERROR( "input in flex scanner failed" );       \
                break;                                                  \
            }                                                           \
            errno=0;                                                    \
            clearerr(yyin);                                             \
        }                                                               \
    }                                                                   \
                                                                        \

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_nullptr
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP                           \
    YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
    yy_state_type yy_current_state;
    char *yy_cp, *yy_bp;
    int yy_act;

    if ( !(yy_init) )
    {
        (yy_init) = 1;

#ifdef YY_USER_INIT
        YY_USER_INIT;
#endif

        if ( ! (yy_start) )
            (yy_start) = 1;    /* first start state */

        if ( ! yyin )
            yyin = stdin;

        if ( ! yyout )
            yyout = stdout;

        if ( ! YY_CURRENT_BUFFER ) {
            yyensure_buffer_stack ();
            YY_CURRENT_BUFFER_LVALUE =
                yy_create_buffer(yyin,YY_BUF_SIZE );
        }

        yy_load_buffer_state( );
    }

    {
#line 30 "lex.l"


#line 1002 "lex.yy.c"

        while ( /*CONSTCOND*/1 )        /* loops until end-of-file is reached */
        {
            yy_cp = (yy_c_buf_p);

            /* Support of yytext. */
            *yy_cp = (yy_hold_char);

            /* yy_bp points to the position in yy_ch_buf of the start of
             * the current run.
             */
            yy_bp = yy_cp;

            yy_current_state = (yy_start);
        yy_match:
            do
            {
                YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
                if ( yy_accept[yy_current_state] )
                {
                    (yy_last_accepting_state) = yy_current_state;
                    (yy_last_accepting_cpos) = yy_cp;
                }
                while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                    yy_current_state = (int) yy_def[yy_current_state];
                    if ( yy_current_state >= 375 )
                        yy_c = yy_meta[(unsigned int) yy_c];
                }
                yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
                ++yy_cp;
            }
            while ( yy_base[yy_current_state] != 730 );

        yy_find_action:
            yy_act = yy_accept[yy_current_state];
            if ( yy_act == 0 )
            { /* have to back up */
                yy_cp = (yy_last_accepting_cpos);
                yy_current_state = (yy_last_accepting_state);
                yy_act = yy_accept[yy_current_state];
            }

            YY_DO_BEFORE_ACTION;

        do_action:    /* This label is used only to access EOF actions. */

            switch ( yy_act )
            { /* beginning of action switch */
            case 0: /* must back up */
                /* undo the effects of YY_DO_BEFORE_ACTION */
                *yy_cp = (yy_hold_char);
                yy_cp = (yy_last_accepting_cpos);
                yy_current_state = (yy_last_accepting_state);
                goto yy_find_action;

            case 1:
/* rule 1 can match eol */
                YY_RULE_SETUP
#line 32 "lex.l"
{ BEGIN(LINE_DIRECTIVE_LINENO); }
                YY_BREAK
            case 2:
                YY_RULE_SETUP
#line 33 "lex.l"
{
    AST::current_location.line = atoi(yytext); BEGIN(LINE_DIRECTIVE_FILENAME); }
                YY_BREAK
            case 3:
/* rule 3 can match eol */
                YY_RULE_SETUP
#line 35 "lex.l"
{
    AST::current_location.filename = yytext; BEGIN(REST_OF_LINE); }
                YY_BREAK
            case 4:
/* rule 4 can match eol */
                YY_RULE_SETUP
#line 37 "lex.l"
{ count(); BEGIN(INITIAL); }
                YY_BREAK
            case 5:
                YY_RULE_SETUP
#line 39 "lex.l"
{ comment(); }
                YY_BREAK
            case 6:
                YY_RULE_SETUP
#line 41 "lex.l"
{ count(); return(DOUBLE); }
                YY_BREAK
            case 7:
                YY_RULE_SETUP
#line 42 "lex.l"
{ count(); return(ELSE);   }
                YY_BREAK
            case 8:
                YY_RULE_SETUP
#line 43 "lex.l"
{ count(); return(FLOAT);  }
                YY_BREAK
            case 9:
                YY_RULE_SETUP
#line 44 "lex.l"
{ count(); return(IF);     }
                YY_BREAK
            case 10:
                YY_RULE_SETUP
#line 45 "lex.l"
{ count(); return(INT);    }
                YY_BREAK
            case 11:
                YY_RULE_SETUP
#line 46 "lex.l"
{ count(); return(BOOL);   }
                YY_BREAK
            case 12:
                YY_RULE_SETUP
#line 47 "lex.l"
{ count(); return(RETURN); }
                YY_BREAK
            case 13:
                YY_RULE_SETUP
#line 48 "lex.l"
{ count(); return(VOID);   }
                YY_BREAK
            case 14:
                YY_RULE_SETUP
#line 49 "lex.l"
{ count(); return(SIGN);   }
                YY_BREAK
            case 15:
                YY_RULE_SETUP
#line 50 "lex.l"
{ count(); return(ABS);    }
                YY_BREAK
            case 16:
                YY_RULE_SETUP
#line 51 "lex.l"
{ count(); return(SQRT);   }
                YY_BREAK
            case 17:
                YY_RULE_SETUP
#line 52 "lex.l"
{ count(); return(TYPEDEF);}
                YY_BREAK
            case 18:
                YY_RULE_SETUP
#line 53 "lex.l"
{ count(); return(INLINE); }
                YY_BREAK
            case 19:
                YY_RULE_SETUP
#line 54 "lex.l"
{ count(); return(ENUM);   }
                YY_BREAK
            case 20:
                YY_RULE_SETUP
#line 55 "lex.l"
{ count(); yylval.int_const = 0; return(INT_CONSTANT); }
                YY_BREAK
            case 21:
                YY_RULE_SETUP
#line 56 "lex.l"
{ count(); yylval.int_const = 1; return(INT_CONSTANT); }
                YY_BREAK
            case 22:
                YY_RULE_SETUP
#line 57 "lex.l"
{ count(); return(EXTERN); }
                YY_BREAK
            case 23:
                YY_RULE_SETUP
#line 58 "lex.l"
{ count(); return(EXACT); }
                YY_BREAK
            case 24:
                YY_RULE_SETUP
#line 59 "lex.l"
{ count(); return(GROUP); }
                YY_BREAK
            case 25:
                YY_RULE_SETUP
#line 60 "lex.l"
{ count(); return(DEGREE); }
                YY_BREAK
            case 26:
                YY_RULE_SETUP
#line 61 "lex.l"
{ count(); return(COMPARE); }
                YY_BREAK
            case 27:
                YY_RULE_SETUP
#line 63 "lex.l"
{ count();
    Type *t = symbol_env.findType( yytext );
    if( t != nullptr ) {
        yylval.type = t;
        return USER_TYPE;
    } else {
        yylval.string_const = strdup( yytext );
        return IDENTIFIER;
    }
}
                YY_BREAK
            case 28:
                YY_RULE_SETUP
#line 74 "lex.l"
{ count(); yylval.int_const = atoi(yytext);
    return(INT_CONSTANT); }
                YY_BREAK
            case 29:
                YY_RULE_SETUP
#line 78 "lex.l"
{ count(); yylval.float_const = atof(yytext);
    return(FLOAT_CONSTANT); }
                YY_BREAK
            case 30:
                YY_RULE_SETUP
#line 80 "lex.l"
{ count(); yylval.float_const = atof(yytext);
    return(FLOAT_CONSTANT); }
                YY_BREAK
            case 31:
                YY_RULE_SETUP
#line 82 "lex.l"
{ count(); yylval.float_const = atof(yytext);
    return(FLOAT_CONSTANT); }
                YY_BREAK
            case 32:
/* rule 32 can match eol */
                YY_RULE_SETUP
#line 85 "lex.l"
{ count(); yylval.string_const = strdup( yytext );
    return(STRING_LITERAL); }
                YY_BREAK
            case 33:
                YY_RULE_SETUP
#line 88 "lex.l"
{ count(); return(RIGHT_ASSIGN); }
                YY_BREAK
            case 34:
                YY_RULE_SETUP
#line 89 "lex.l"
{ count(); return(LEFT_ASSIGN); }
                YY_BREAK
            case 35:
                YY_RULE_SETUP
#line 90 "lex.l"
{ count(); return(ADD_ASSIGN); }
                YY_BREAK
            case 36:
                YY_RULE_SETUP
#line 91 "lex.l"
{ count(); return(SUB_ASSIGN); }
                YY_BREAK
            case 37:
                YY_RULE_SETUP
#line 92 "lex.l"
{ count(); return(MUL_ASSIGN); }
                YY_BREAK
            case 38:
                YY_RULE_SETUP
#line 93 "lex.l"
{ count(); return(DIV_ASSIGN); }
                YY_BREAK
            case 39:
                YY_RULE_SETUP
#line 94 "lex.l"
{ count(); return(MOD_ASSIGN); }
                YY_BREAK
            case 40:
                YY_RULE_SETUP
#line 95 "lex.l"
{ count(); return(AND_ASSIGN); }
                YY_BREAK
            case 41:
                YY_RULE_SETUP
#line 96 "lex.l"
{ count(); return(XOR_ASSIGN); }
                YY_BREAK
            case 42:
                YY_RULE_SETUP
#line 97 "lex.l"
{ count(); return(OR_ASSIGN); }
                YY_BREAK
            case 43:
                YY_RULE_SETUP
#line 98 "lex.l"
{ count(); return(RIGHT_OP); }
                YY_BREAK
            case 44:
                YY_RULE_SETUP
#line 99 "lex.l"
{ count(); return(LEFT_OP); }
                YY_BREAK
            case 45:
                YY_RULE_SETUP
#line 100 "lex.l"
{ count(); return(INC_OP); }
                YY_BREAK
            case 46:
                YY_RULE_SETUP
#line 101 "lex.l"
{ count(); return(DEC_OP); }
                YY_BREAK
            case 47:
                YY_RULE_SETUP
#line 102 "lex.l"
{ count(); return(PTR_OP); }
                YY_BREAK
            case 48:
                YY_RULE_SETUP
#line 103 "lex.l"
{ count(); return(AND_OP); }
                YY_BREAK
            case 49:
                YY_RULE_SETUP
#line 104 "lex.l"
{ count(); return(OR_OP); }
                YY_BREAK
            case 50:
                YY_RULE_SETUP
#line 105 "lex.l"
{ count(); return(LE_OP); }
                YY_BREAK
            case 51:
                YY_RULE_SETUP
#line 106 "lex.l"
{ count(); return(GE_OP); }
                YY_BREAK
            case 52:
                YY_RULE_SETUP
#line 107 "lex.l"
{ count(); return(EQ_OP); }
                YY_BREAK
            case 53:
                YY_RULE_SETUP
#line 108 "lex.l"
{ count(); return(NE_OP); }
                YY_BREAK
            case 54:
                YY_RULE_SETUP
#line 109 "lex.l"
{ count(); return(';'); }
                YY_BREAK
            case 55:
                YY_RULE_SETUP
#line 110 "lex.l"
{ count(); return('{'); }
                YY_BREAK
            case 56:
                YY_RULE_SETUP
#line 111 "lex.l"
{ count(); return('}'); }
                YY_BREAK
            case 57:
                YY_RULE_SETUP
#line 112 "lex.l"
{ count(); return(','); }
                YY_BREAK
            case 58:
                YY_RULE_SETUP
#line 113 "lex.l"
{ count(); return(':'); }
                YY_BREAK
            case 59:
                YY_RULE_SETUP
#line 114 "lex.l"
{ count(); return('='); }
                YY_BREAK
            case 60:
                YY_RULE_SETUP
#line 115 "lex.l"
{ count(); return('('); }
                YY_BREAK
            case 61:
                YY_RULE_SETUP
#line 116 "lex.l"
{ count(); return(')'); }
                YY_BREAK
            case 62:
                YY_RULE_SETUP
#line 117 "lex.l"
{ count(); return('['); }
                YY_BREAK
            case 63:
                YY_RULE_SETUP
#line 118 "lex.l"
{ count(); return(']'); }
                YY_BREAK
            case 64:
                YY_RULE_SETUP
#line 119 "lex.l"
{ count(); return('.'); }
                YY_BREAK
            case 65:
                YY_RULE_SETUP
#line 120 "lex.l"
{ count(); return('&'); }
                YY_BREAK
            case 66:
                YY_RULE_SETUP
#line 121 "lex.l"
{ count(); return('!'); }
                YY_BREAK
            case 67:
                YY_RULE_SETUP
#line 122 "lex.l"
{ count(); return('~'); }
                YY_BREAK
            case 68:
                YY_RULE_SETUP
#line 123 "lex.l"
{ count(); return('-'); }
                YY_BREAK
            case 69:
                YY_RULE_SETUP
#line 124 "lex.l"
{ count(); return('+'); }
                YY_BREAK
            case 70:
                YY_RULE_SETUP
#line 125 "lex.l"
{ count(); return('*'); }
                YY_BREAK
            case 71:
                YY_RULE_SETUP
#line 126 "lex.l"
{ count(); return('/'); }
                YY_BREAK
            case 72:
                YY_RULE_SETUP
#line 127 "lex.l"
{ count(); return('%'); }
                YY_BREAK
            case 73:
                YY_RULE_SETUP
#line 128 "lex.l"
{ count(); return('<'); }
                YY_BREAK
            case 74:
                YY_RULE_SETUP
#line 129 "lex.l"
{ count(); return('>'); }
                YY_BREAK
            case 75:
                YY_RULE_SETUP
#line 130 "lex.l"
{ count(); return('^'); }
                YY_BREAK
            case 76:
                YY_RULE_SETUP
#line 131 "lex.l"
{ count(); return('|'); }
                YY_BREAK
            case 77:
                YY_RULE_SETUP
#line 132 "lex.l"
{ count(); return('?'); }
                YY_BREAK
            case 78:
/* rule 78 can match eol */
                YY_RULE_SETUP
#line 134 "lex.l"
{ count(); }
                YY_BREAK
            case 79:
                YY_RULE_SETUP
#line 136 "lex.l"
{ count(); yyerror((char*)("bad character")); }
                YY_BREAK
            case 80:
                YY_RULE_SETUP
#line 138 "lex.l"
                    ECHO;
                YY_BREAK
#line 1480 "lex.yy.c"
            case YY_STATE_EOF(INITIAL):
            case YY_STATE_EOF(LINE_DIRECTIVE_LINENO):
            case YY_STATE_EOF(LINE_DIRECTIVE_FILENAME):
            case YY_STATE_EOF(REST_OF_LINE):
                yyterminate();

            case YY_END_OF_BUFFER:
            {
                /* Amount of text matched not including the EOB char. */
                int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

                /* Undo the effects of YY_DO_BEFORE_ACTION. */
                *yy_cp = (yy_hold_char);
                YY_RESTORE_YY_MORE_OFFSET

                    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
                    {
                        /* We're scanning a new file or input source.  It's
                         * possible that this happened because the user
                         * just pointed yyin at a new source and called
                         * yylex().  If so, then we have to assure
                         * consistency between YY_CURRENT_BUFFER and our
                         * globals.  Here is the right place to do so, because
                         * this is the first action (other than possibly a
                         * back-up) that will match for the new input source.
                         */
                        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                        YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
                    }

                /* Note that here we test for yy_c_buf_p "<=" to the position
                 * of the first EOB in the buffer, since yy_c_buf_p will
                 * already have been incremented past the NUL character
                 * (since all states make transitions on EOB to the
                 * end-of-buffer state).  Contrast this with the test
                 * in input().
                 */
                if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
                { /* This was really a NUL. */
                    yy_state_type yy_next_state;

                    (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state(  );

                    /* Okay, we're now positioned to make the NUL
                     * transition.  We couldn't have
                     * yy_get_previous_state() go ahead and do it
                     * for us because it doesn't know how to deal
                     * with the possibility of jamming (and we don't
                     * want to build jamming into it because then it
                     * will run more slowly).
                     */

                    yy_next_state = yy_try_NUL_trans( yy_current_state );

                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                    if ( yy_next_state )
                    {
                        /* Consume the NUL. */
                        yy_cp = ++(yy_c_buf_p);
                        yy_current_state = yy_next_state;
                        goto yy_match;
                    }

                    else
                    {
                        yy_cp = (yy_c_buf_p);
                        goto yy_find_action;
                    }
                }

                else switch ( yy_get_next_buffer(  ) )
                     {
                     case EOB_ACT_END_OF_FILE:
                     {
                         (yy_did_buffer_switch_on_eof) = 0;

                         if ( yywrap( ) )
                         {
                             /* Note: because we've taken care in
                              * yy_get_next_buffer() to have set up
                              * yytext, we can now set up
                              * yy_c_buf_p so that if some total
                              * hoser (like flex itself) wants to
                              * call the scanner after we return the
                              * YY_nullptr, it'll still work - another
                              * YY_nullptr will get returned.
                              */
                             (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                             yy_act = YY_STATE_EOF(YY_START);
                             goto do_action;
                         }

                         else
                         {
                             if ( ! (yy_did_buffer_switch_on_eof) )
                                 YY_NEW_FILE;
                         }
                         break;
                     }

                     case EOB_ACT_CONTINUE_SCAN:
                         (yy_c_buf_p) =
                             (yytext_ptr) + yy_amount_of_matched_text;

                         yy_current_state = yy_get_previous_state(  );

                         yy_cp = (yy_c_buf_p);
                         yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                         goto yy_match;

                     case EOB_ACT_LAST_MATCH:
                         (yy_c_buf_p) =
                             &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                         yy_current_state = yy_get_previous_state(  );

                         yy_cp = (yy_c_buf_p);
                         yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                         goto yy_find_action;
                     }
                break;
            }

            default:
                YY_FATAL_ERROR(
                    "fatal flex scanner internal error--no action found" );
            } /* end of action switch */
        } /* end of scanning one token */
    } /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *    EOB_ACT_LAST_MATCH -
 *    EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *    EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
    char *source = (yytext_ptr);
    yy_size_t number_to_move, i;
    int ret_val;

    if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--end of buffer missed" );

    if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
    { /* Don't try to fill the buffer, so this is an EOF. */
        if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
        {
            /* We matched a single character, the EOB, so
             * treat this as a final EOF.
             */
            return EOB_ACT_END_OF_FILE;
        }

        else
        {
            /* We matched some text prior to the EOB, first
             * process it.
             */
            return EOB_ACT_LAST_MATCH;
        }
    }

    /* Try to read more data. */

    /* First move last chars to start of buffer. */
    number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

    for ( i = 0; i < number_to_move; ++i )
        *(dest++) = *(source++);

    if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
        /* don't do the read, it's not guaranteed to return an EOF,
         * just force an EOF
         */
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

    else
    {
        yy_size_t num_to_read =
            YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

        while ( num_to_read <= 0 )
        { /* Not enough room in the buffer - grow it. */

            /* just a shorter name for the current buffer */
            YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

            int yy_c_buf_p_offset =
                (int) ((yy_c_buf_p) - b->yy_ch_buf);

            if ( b->yy_is_our_buffer )
            {
                yy_size_t new_size = b->yy_buf_size * 2;

                if ( new_size <= 0 )
                    b->yy_buf_size += b->yy_buf_size / 8;
                else
                    b->yy_buf_size *= 2;

                b->yy_ch_buf = (char *)
                    /* Include room in for 2 EOB chars. */
                    yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
            }
            else
                /* Can't grow it, we don't own it. */
                b->yy_ch_buf = 0;

            if ( ! b->yy_ch_buf )
                YY_FATAL_ERROR(
                    "fatal error - scanner input buffer overflow" );

            (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

            num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                number_to_move - 1;

        }

        if ( num_to_read > YY_READ_BUF_SIZE )
            num_to_read = YY_READ_BUF_SIZE;

        /* Read in more data. */
        YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
                  (yy_n_chars), num_to_read );

        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    if ( (yy_n_chars) == 0 )
    {
        if ( number_to_move == YY_MORE_ADJ )
        {
            ret_val = EOB_ACT_END_OF_FILE;
            yyrestart(yyin  );
        }

        else
        {
            ret_val = EOB_ACT_LAST_MATCH;
            YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
                YY_BUFFER_EOF_PENDING;
        }
    }

    else
        ret_val = EOB_ACT_CONTINUE_SCAN;

    if ((int) ((yy_n_chars) + number_to_move) > (int)YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
        /* Extend the array by 50%, plus the number we really need. */
        int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
        YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
        if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
            YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
    }

    (yy_n_chars) += number_to_move;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

    (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

    return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state (void)
{
    yy_state_type yy_current_state;
    char *yy_cp;

    yy_current_state = (yy_start);

    for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
    {
        YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
        if ( yy_accept[yy_current_state] )
        {
            (yy_last_accepting_state) = yy_current_state;
            (yy_last_accepting_cpos) = yy_cp;
        }
        while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
        {
            yy_current_state = (int) yy_def[yy_current_state];
            if ( yy_current_state >= 375 )
                yy_c = yy_meta[(unsigned int) yy_c];
        }
        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

    return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *    next_state = yy_try_NUL_trans( current_state );
 */
static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
    int yy_is_jam;
    char *yy_cp = (yy_c_buf_p);

    YY_CHAR yy_c = 1;
    if ( yy_accept[yy_current_state] )
    {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
    }
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
    {
        yy_current_state = (int) yy_def[yy_current_state];
        if ( yy_current_state >= 375 )
            yy_c = yy_meta[(unsigned int) yy_c];
    }
    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    yy_is_jam = (yy_current_state == 374);

    return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

static void yyunput (int c, char * yy_bp )
{
    char *yy_cp;

    yy_cp = (yy_c_buf_p);

    /* undo effects of setting up yytext */
    *yy_cp = (yy_hold_char);

    if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
    { /* need to shift things up to make room */
        /* +2 for EOB chars. */
        yy_size_t number_to_move = (yy_n_chars) + 2;
        char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
            YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
        char *source =
            &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

        while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
            *--dest = *--source;

        yy_cp += (int) (dest - source);
        yy_bp += (int) (dest - source);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
            (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

        if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
            YY_FATAL_ERROR( "flex scanner push-back overflow" );
    }

    *--yy_cp = (char) c;

    (yytext_ptr) = yy_bp;
    (yy_hold_char) = *yy_cp;
    (yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput (void)
#else
    static int input  (void)
#endif

{
    int c;

    *(yy_c_buf_p) = (yy_hold_char);

    if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
    {
        /* yy_c_buf_p now points to the character we want to return.
         * If this occurs *before* the EOB characters, then it's a
         * valid NUL; if not, then we've hit the end of the buffer.
         */
        if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
            /* This was really a NUL. */
            *(yy_c_buf_p) = '\0';

        else
        { /* need more input */
            yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
            ++(yy_c_buf_p);

            switch ( yy_get_next_buffer(  ) )
            {
            case EOB_ACT_LAST_MATCH:
                /* This happens because yy_g_n_b()
                 * sees that we've accumulated a
                 * token and flags that we need to
                 * try matching the token before
                 * proceeding.  But for input(),
                 * there's no matching to consider.
                 * So convert the EOB_ACT_LAST_MATCH
                 * to EOB_ACT_END_OF_FILE.
                 */

                /* Reset buffer status. */
                yyrestart(yyin );

                /*FALLTHROUGH*/

            case EOB_ACT_END_OF_FILE:
            {
                if ( yywrap( ) )
                    return EOF;

                if ( ! (yy_did_buffer_switch_on_eof) )
                    YY_NEW_FILE;
#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
            }

            case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) = (yytext_ptr) + offset;
                break;
            }
        }
    }

    c = *(unsigned char *) (yy_c_buf_p);    /* cast for 8-bit char's */
    *(yy_c_buf_p) = '\0';    /* preserve yytext */
    (yy_hold_char) = *++(yy_c_buf_p);

    return c;
}
#endif    /* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyrestart  (FILE * input_file )
{

    if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
        YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
    }

    yy_init_buffer(YY_CURRENT_BUFFER,input_file );
    yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{

    /* TODO. We should be able to replace this entire function body
     * with
     *        yypop_buffer_state();
     *        yypush_buffer_state(new_buffer);
     */
    yyensure_buffer_stack ();
    if ( YY_CURRENT_BUFFER == new_buffer )
        return;

    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    YY_CURRENT_BUFFER_LVALUE = new_buffer;
    yy_load_buffer_state( );

    /* We don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    (yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
    (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
    yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
    (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_buf_size = (yy_size_t)size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
    if ( ! b->yy_ch_buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

    b->yy_is_our_buffer = 1;

    yy_init_buffer(b,file );

    return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yy_delete_buffer (YY_BUFFER_STATE  b )
{

    if ( ! b )
        return;

    if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
        YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

    if ( b->yy_is_our_buffer )
        yyfree((void *) b->yy_ch_buf  );

    yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
    int oerrno = errno;

    yy_flush_buffer(b );

    b->yy_input_file = file;
    b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

    b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

    errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    if ( ! b )
        return;

    b->yy_n_chars = 0;

    /* We always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[0];

    b->yy_at_bol = 1;
    b->yy_buffer_status = YY_BUFFER_NEW;

    if ( b == YY_CURRENT_BUFFER )
        yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    if (new_buffer == nullptr)
        return;

    yyensure_buffer_stack();

    /* This block is copied from yy_switch_to_buffer. */
    if ( YY_CURRENT_BUFFER )
    {
        /* Flush out information for old buffer. */
        *(yy_c_buf_p) = (yy_hold_char);
        YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
        YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

    /* Only push if top exists. Otherwise, replace top. */
    if (YY_CURRENT_BUFFER)
        (yy_buffer_stack_top)++;
    YY_CURRENT_BUFFER_LVALUE = new_buffer;

    /* copied from yy_switch_to_buffer. */
    yy_load_buffer_state( );
    (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yypop_buffer_state (void)
{
    if (!YY_CURRENT_BUFFER)
        return;

    yy_delete_buffer(YY_CURRENT_BUFFER );
    YY_CURRENT_BUFFER_LVALUE = nullptr;
    if ((yy_buffer_stack_top) > 0)
        --(yy_buffer_stack_top);

    if (YY_CURRENT_BUFFER) {
        yy_load_buffer_state( );
        (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
    yy_size_t num_to_alloc;

    if (!(yy_buffer_stack)) {

        /* First allocation is just for 2 elements, since we don't know if this
         * scanner will even need a stack. We use 2 instead of 1 to avoid an
         * immediate realloc on the next call.
         */
        num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
        (yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
            (num_to_alloc * sizeof(struct yy_buffer_state*)
            );
        if ( ! (yy_buffer_stack) )
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

        memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

        (yy_buffer_stack_max) = num_to_alloc;
        (yy_buffer_stack_top) = 0;
        return;
    }

    if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

        /* Increase the buffer to prepare for a possible push. */
        yy_size_t grow_size = 8 /* arbitrary grow size */;

        num_to_alloc = (yy_buffer_stack_max) + grow_size;
        (yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
            ((yy_buffer_stack),
             num_to_alloc * sizeof(struct yy_buffer_state*)
            );
        if ( ! (yy_buffer_stack) )
            YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

        /* zero only the new slots.*/
        memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
        (yy_buffer_stack_max) = num_to_alloc;
    }
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
    YY_BUFFER_STATE b;

    if ( size < 2 ||
         base[size-2] != YY_END_OF_BUFFER_CHAR ||
         base[size-1] != YY_END_OF_BUFFER_CHAR )
        /* They forgot to leave room for the EOB's. */
        return 0;

    b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
    if ( ! b )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

    b->yy_buf_size = size - 2;    /* "- 2" to take care of EOB's */
    b->yy_buf_pos = b->yy_ch_buf = base;
    b->yy_is_our_buffer = 0;
    b->yy_input_file = 0;
    b->yy_n_chars = b->yy_buf_size;
    b->yy_is_interactive = 0;
    b->yy_at_bol = 1;
    b->yy_fill_buffer = 0;
    b->yy_buffer_status = YY_BUFFER_NEW;

    yy_switch_to_buffer(b  );

    return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 *
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{

    return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 *
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
    YY_BUFFER_STATE b;
    char *buf;
    yy_size_t n;
    yy_size_t i;

    /* Get memory for full buffer, including space for trailing EOB's. */
    n = _yybytes_len + 2;
    buf = (char *) yyalloc(n  );
    if ( ! buf )
        YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

    for ( i = 0; i < _yybytes_len; ++i )
        buf[i] = yybytes[i];

    buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

    b = yy_scan_buffer(buf,n );
    if ( ! b )
        YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

    /* It's okay to grow etc. this buffer, and we should throw it
     * away when we're done.
     */
    b->yy_is_our_buffer = 1;

    return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    (void) fprintf( stderr, "%s\n", msg );
    exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n)                                       \
    do                                                  \
    {                                                   \
        /* Undo effects of setting up yytext. */        \
        int yyless_macro_arg = (n);                     \
        YY_LESS_LINENO(yyless_macro_arg);               \
        yytext[yyleng] = (yy_hold_char);                \
        (yy_c_buf_p) = yytext + yyless_macro_arg;       \
        (yy_hold_char) = *(yy_c_buf_p);                 \
        *(yy_c_buf_p) = '\0';                           \
        yyleng = yyless_macro_arg;                      \
    }                                                   \
    while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 *
 */
int yyget_lineno  (void)
{

    return yylineno;
}

/** Get the input stream.
 *
 */
FILE *yyget_in  (void)
{
    return yyin;
}

/** Get the output stream.
 *
 */
FILE *yyget_out  (void)
{
    return yyout;
}

/** Get the length of the current token.
 *
 */
yy_size_t yyget_leng  (void)
{
    return yyleng;
}

/** Get the current token.
 *
 */

char *yyget_text  (void)
{
    return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 *
 */
void yyset_lineno (int  _line_number )
{

    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 *
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
    yyout = _out_str ;
}

int yyget_debug  (void)
{
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
    yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
    while(YY_CURRENT_BUFFER){
        yy_delete_buffer(YY_CURRENT_BUFFER  );
        YY_CURRENT_BUFFER_LVALUE = nullptr;
        yypop_buffer_state();
    }

    /* Destroy the stack itself. */
    yyfree((yy_buffer_stack) );
    (yy_buffer_stack) = nullptr;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{

    int i;
    for ( i = 0; i < n; ++i )
        s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
    int n;
    for ( n = 0; s[n]; ++n )
        ;

    return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
    return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{

    /* The cast to (char *) in the following accommodates both
     * implementations that use char* generic pointers, and those
     * that use void* generic pointers.  It works with the latter
     * because both ANSI C and C++ allow castless assignment from
     * any pointer type to void*, and deal with argument conversions
     * as though doing an assignment.
     */
    return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
    free( (char *) ptr );    /* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 138 "lex.l"




int yywrap() {
    return 1;
}

void comment() {
    char c, c1;
loop:
    while ((c = (char)yyinput()) != '*' && c != 0)
        /*putchar(c)*/;

    if ((c1 = (char)yyinput()) != '/' && c != 0)
    {
        //unput(c1);
        goto loop;
    }

    if (c != 0) {
    }
    /*putchar(c1) ;*/
}


int column = 0;

void count() {
    int i;

    for (i = 0; yytext[i] != '\0'; ++i)
        if (yytext[i] == '\n') {
            column = 0;
            ++lineno;
            ++AST::current_location.line;
        }
        else if (yytext[i] == '\t')
            column += 8 - (column % 8);
        else
            column++;
    AST::current_location.column = column;
}

int foo() { return yyunput(42,0),2; }
